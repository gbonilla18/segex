============ DATABASE SETUP ===============

1. Create empty database and add a dedicated user account. Note: in the default
MySQL installation, the root password is empty (simply press enter to proceed).

  mysql -u root -p
  > CREATE DATABASE segex_dev;
  > CREATE USER 'segex_dev_user'@'localhost' IDENTIFIED BY 'b00g3yk1d';
  > GRANT SELECT, INSERT, UPDATE, DELETE, CREATE TEMPORARY TABLES
    ON segex_dev.* TO 'segex_dev_user'@'localhost';

2. Load database from backup

  gunzip -c segex.sql.gz | mysql segex_dev -u root -p

3. Update SGX/Config.pm module with correct database, user, and password
information.

TODO: create an interactive-prompt type interface for automating database
creation and updating the Config.pm file.


============ SOFTWARE INSTALL ===============

==== A. Linux ====

1. Change log file path in "Debug.pm" to a path actually present and writable on
the given system. On Linux, the path is "/var/www/error_log/error_log". Then one
has to make sure that a CGI process has write access to said file. On Linux,
Apache server process is owned by user under username "nobody". However, I
recommend creating a separate log file so that more than one software/database
instance could be set up on the same machine.

  mkdir -p ~/log/apache2
  cd  ~/log/apache2
  touch segex_dev_log
  sudo chown nobody:nobody segex_dev_log

TODO: create an interactive-prompt type interface for entering log path.

2. Check Perl dependencies. Tie::IxHash and JSON are not included in the default
Perl installation on Linux Cent OS. The commands below upgrade and reload the
cpan executable before installing the packages on which SEGEX depends:

  sudo /usr/bin/perl -MCPAN -e shell
  > install CPAN
  > reload cpan
  > install Tie::IxHash
  > install JSON
  > install Text::CSV
  > install Exception::Class::DBI

 
3. Copy files. Note: symlinks can be created instead of copying, however that
would require FollowSymLinks directive to be set in the Apache configuration
file for both CGI_ROOT and DOCUMENTS_ROOT directories.

   # /cgi-bin/segex_dev
   cd /var/www/cgi-bin
   sudo cp -R /home/escherba/segex/cgi-bin segex_dev

   # /yui
   cd /var/www/
   tar xvzf ~/tarballs/yui.tgz .

   # /segex_dev/
   mkdir segex_dev
   cd segex_dev

   # /segex_dev/css
   sudo cp -R ~/segex/css .

   # /segex_dev/js
   sudo cp -R ~/segex/js .

   # /segex_dev/images
   sudo cp -R ~/segex/images .

TODO: automate file copying: have user provide only two directories: CGI_ROOT
and DOCUMENTS_ROOT. Create the subtree containing css/, images/, and js/
directories under DOCUMENTS_ROOT and the subtree corresponding to cgi-bin under
CGI_ROOT.

4. To enable URL rewriting (removes the need to enter "index.cgi" in the URL,
modify your main Apache configuration file (usually /etc/httpd/conf/httpd.conf)
to allow .htaccess overrides. On Linux Cent OS, this means:

<Directory "/var/www/cgi-bin">
    AllowOverride Options FileInfo
    ...

5. Check that path to default mailer program (sendmail, postfix, etc) is set
correctly in SGX/Config.pm. On both Mac OS X and Linux Cent OS, this path is
/usr/sbin.

use constant MAILER_PATH => '/usr/sbin';

==== B. Mac OS X ====

1. Change log file path in "Debug.pm" to a path actually present and writable on
the given system. On Mac OS X, the path is "/private/var/log/apache2/error_log".
Then one has to make sure that a CGI process has write access to said file. On
Mac OS X, Apache server process is owned by user under username "www". However,
I recommend creating a separate log file so that more than one software/database
instance could be set up on the same machine.

  mkdir -p ~/log/apache2
  cd  ~/log/apache2
  touch segex_dev_log
  sudo chown www:wheel segex_dev_log

TODO: create an interactive-prompt type interface for entering log path.

2. Check Perl dependencies. Apache::Session, DBD::mysql, Tie::IxHash, and JSON
are not included in the default Perl installation on Mac OS X Snow Leopard. The
commands below upgrade and reload the cpan executable before installing packages
on which SEGEX depends:

  sudo /usr/bin/perl -MCPAN -e shell
  > install CPAN
  > reload cpan
  > install Apache::Session
  > install DBD::mysql
  > install Mail::Send
  > install Tie::IxHash
  > install JSON
  > install Text::CSV
  > install Exception::Class::DBI

Note 1: If you are running Mac OS X 10.6 and have Xcode 4 installed, you no
longer have PPC assembler required to build CPAN packages. To work around this,
you can either (a) go to the corresponding subdirectory in ~/.cpan/build, remove
all references to PPC architecture (e.g. "-arch ppc") and reinstall package with
"sudo make" and "sudo make install". To ensure CPAN can see your module, type
"install My::Module" in CPAN shell and press <Enter>. You should see a message,
"My::Module is up to date (vx.xx)".  Alternatively (b), create the following
symlinks:

sudo ln -s \
/Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc \
/Developer/usr/libexec/gcc/darwin

sudo ln -s \
/Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc \
/usr/libexec/gcc/darwin

3. Set up mailer. The Mail::Send module can use either Sendmail or Postfix. The
current version of SEGEX relies on a default mailer, which can be either
Sendmail or Postfix depending on the system. On my Mac OS X Snow Leopard, the
default mailer is Postfix.

   GMAIL EMAIL RELAY USING POSTFIX ON MAC OS X 
        (Adapted with some changes after: 
        http://www.riverturn.com/blog/?p=239)

   3.1. Create the Simple Authentication and Security Layer (SASL) password
file.

        sudo vi /etc/postfix/sasl_passwd

        Enter the following and save the file:

        smtp.gmail.com:587 your_name@gmail.com:your_password

   3.2. Create a Postfix lookup table for SASL.

        sudo postmap /etc/postfix/sasl_passwd

   This creates a binary file called "/etc/postfix/sasl_passwd.db". When
done, you can delete the "/etc/postfix/sasl_passwd" created in the previous
step, to prevent the plain-text password from being discovered by an attacker
(Postfix will use the .db file from now on):

        sudo rm /etc/postfix/sasl_passwd

   Also, there is no need for anyone but root to have read access to the
database:

        sudo chmod 600 /etc/postfix/sasl_passwd.db

   3.3. Configure Postfix:

        sudo vi /etc/postfix/main.cf

   By default, everything is commented out. You can just append the following to
the end of file and then save it:

        # Minimum Postfix-specific configurations.
        mydomain_fallback = localhost
        mail_owner = _postfix
        setgid_group = _postdrop
        relayhost=smtp.gmail.com:587

        # Enable SASL authentication in the Postfix SMTP client.
        smtp_sasl_auth_enable=yes
        smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
        smtp_sasl_security_options=

        # Enable Transport Layer Security (TLS), i.e. SSL.
        smtp_use_tls=yes
        smtp_tls_security_level=encrypt
        tls_random_source=dev:/dev/urandom

   3.4. Test that everything is OK with "sudo postfix start" or, if the process
is already running, with "sudo postfix reload". If you need to view mail queue,
type "mailq" in the terminal. To clear the mail queue, run "sudo postsuper -d
ALL".

4. Copy files. Note: symlinks can be created instead of copying, however that
would require FollowSymLinks directive to be set in the Apache configuration
file for both CGI_ROOT and DOCUMENTS_ROOT directories.

   # /cgi-bin/segex_dev
   cd /Library/WebServer/CGI-Executables
   sudo cp -R ~/segex_dev/cgi-bin segex_dev

   # /yui
   cd /Library/WebServer/Documents
   tar xvzf ~/tarballs/yui.tgz .

   # /segex_dev/
   mkdir segex_dev
   cd segex_dev

   # /segex_dev/css
   sudo cp -R ~/segex/css .

   # /segex_dev/images
   sudo cp -R ~/segex/images .

   # /segex_dev/js
   sudo cp -R ~/segex/js .

5. To enable URL rewriting (removes the need to enter "index.cgi" in the URL,
modify your main Apache configuration file (usually /etc/apache2/httpd.conf) to
allow .htaccess overrides. On Mac OS X, this means: 

<Directory "/Library/WebServer/CGI-Executables">
    AllowOverride Options FileInfo
    ...

6. Check that path to default mailer program (sendmail, postfix, etc) is set
correctly in SGX/Config.pm. On both Mac OS X and Linux Cent OS, this path is
/usr/sbin.

use constant MAILER_PATH => '/usr/sbin';
