*) rename table "microarray" to "response" (don't rush with this)

*) Tentative: move "public" field from "Experiment" to "Study". Consequence: if
a particular experiment needs to be released but other experiments from the same
study need to stay private, the given # experiment will have to be referenced to
from a separate, "public" study (can be a virtual link).

*) Write tests?

*) Installation: automate file copying: have user provide only two directories:
CGI_ROOT and DOCUMENTS_ROOT. Create the subtree containing css/, images/, and
js/ directories under DOCUMENTS_ROOT and the subtree corresponding to cgi-bin
under CGI_ROOT.

*) Since permanent cookie storage was introduced (initially to store current
Working Project ids), it is now possible to recover expired sessions by storing
the session id in permanent storage. Implementing this would help keep
"sessions" table small.

*) Project ID must be an URL parameter for the Compare Experiments module,
otherwise execution and results will be state-dependent, which will cause
problems when emailing links, for example.

*) The Find Probes form should be generated by the same routine in Find Probes
as in the "filter by list" section of Compare Experiments.

*) One should be able to upload a file in Find Probes form just as it currently
is in Compare Experiments.

*) Use YUI tooltip control to make forms (e.g. Find Probes, Compare Experiments)
more user-friendly.
http://developer.yahoo.com/yui/examples/container/tooltip.html

*) Raphael is now a plugin for YUI 3: http://yuilibrary.com/gallery/show/raphael
This is very exciting. Investigate (1) whether changing over to YUI 3 is
feasible (seems like it should be!) and (2) whether Raphael can be used for easy
graphing (will probably have to write own Javascript graphing module).

*) Venn diagrams could be plotted using Raphael. What is needed: optimization
algorithm (implemented in Javascript) for 3-cirlcle diagrams, and something to
show text labels (i.e. how many probes are significant). If done, place
resulting code on Github.

*) Links in Manage Studies should direct user directly from an upload data form
(to a new experiment) with the given study preselected.

*) Make upload file headers optional in Upload Data to a new experiment

*) CSV format should be supported in addition to tab-delimited. The idea is that
the same formats that are supported for output should also be supported for
input.

*) Instead of scattering calls to File::Temp throughout the application,
consider centralizing temporary directory info in Config.pm either by relying on
prefix from File::Temp or some other way.

*) Eventually, we need at least two types of database users: segex_basic and
segex_user. segex_user is granted UPDATE, INSERT, DELETE, and CREATE TEMPOARY
privileges, while segex_basic is only granted SELECT.

*) use better names for CSV output (replace "results.csv" with some kind of
coding, e.g. results-61-37.csv where 61 and 37 are experiment ids being
compared).

*) Use GO database as an example of how data could be set up:
http://archive.geneontology.org/latest-full/README
(Note that we will be using InnoDB and we will have foreign keys which may
complicate setup).

*) Compare Experiments main result page should list platform and species in HTML
output.

*) When comparing experiments 60-64 (Mouse Agilent 44K_v1) and filtering on gene
prefix Kcne, the filter probe list (hidden field) becomes very long. This is (a)
inefficient, (b) prevents us from using RESTful queries for getTFS slices. Need
to have code that "knows" the shortest way to request the necessary information
from getTFS. It should "remember" that user queried for Kcne prefix and use that
query if probe list is too long (longer than original query).

*) For Manage Studies, use YUI buttons for switching between forms for (a)
editing study fields, (b) assigning existing experiment, (c) adding new
experiment.

*) Consider using a Tree View instead of multiple levels of dropdown boxes. YUI
has a Tree View control available. Doing so would make sense -- consider the
following hierarchy:
	species -> platform -> study -> experiment
It's four levels deep!

*) Implement breadcrumbs.
