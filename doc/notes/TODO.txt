*) rename table "microarray" to "response" (don't rush with this)

*) Tentative: move "public" field from "Experiment" to "Study". Consequence: if
a particular experiment needs to be released but other experiments from the same
study need to stay private, the given # experiment will have to be referenced to
from a separate, "public" study (can be a virtual link).

*) abstract out reliance on local /js/ path in modules under SGX/.

*) Write tests?

*) ManageStudies: a) why does _LoadQueryPID do an inner join by annotated
platform?  What doesn't it just list all studies (left join on platform)?  b)
_ExistingUnassignedStudyQuery --  why do a natural join with "microarray" table?
Seems like a very roundabout way to get a list of experiments for a given
platform

*) Concern about concepts used in SEGEX -- will these concepts be defined in a
similar way in labs run by other researchers? Discuss this with Dr. Waxman.
Example:

   a) Study has a pubmed id, however only plates belonging to the same platform
can be a part of the same study. This seems problematic because it seems natural
that a published study may involve more than one platform (for example, a study
could be investigating how a certain protein is expressed under certain
conditions in mice vs rats vs humans).

   b) This leads me to think that a better name for "study" would be "group" (of
plates).  Alternatively, one could allow more than one platform to be a part of
the same study.  As far as my understanding goes, Dr. Waxman's largest concern
about allowing this was that one would never want to compare plates from
different platforms using "Compare Experiments" module (is this right?). However
it doesn't look like making a small modification to "Compare Experiments" module
to allow it to recognize platforms  would be very difficult.

   c) The way I currently see this is: "study" is actually a group of plates of
same type/platform, "experiment" is actually a plate.

*) abstract away common patterns in SGX/*.pm modules. For example, ManageStudies
object is in many ways similar to ManageProjects. Formalize this similarity and
abstract it away (to superclass perhaps?).

*) UI: when no pull-down menus have no items in them, do not show the pulldowns
at all.

*) Installation: automate file copying: have user provide only two directories:
CGI_ROOT and DOCUMENTS_ROOT. Create the subtree containing css/, images/, and
js/ directories under DOCUMENTS_ROOT and the subtree corresponding to cgi-bin
under CGI_ROOT.

*) Since permanent cookie storage was introduced (initially to store current
Working Project ids), it is now possible to recover expired sessions by storing
the session id in permanent storage. Implementing this would help keep
"sessions" table small.

*) The following does not seem to work: Although both ^Cyp2b and ^Cyp4b are
present in the database, only Cyp2b-prefixed genes show up in the following
query:
http://localhost/cgi-bin/segex/index.cgi?text=Cyp2b%0D%0ACyp4b&type=gene&match=prefix&opts=1&trans=fold&a=Search
Need to rewrite text box content on submission of Find Probes form, to replace
new lines with commas before anything is sent to the server.

*) Project ID must be an URL parameter for the Compare Experiments module,
otherwise execution and results will be state-dependent, which will cause
problems when emailing links, for example.

*) The Find Probes form should be generated by the same routine in Find Probes
as in the "filter by list" section of Compare Experiments.

*) One should be able to upload a file in Find Probes form just as it currently
is in Compare Experiments.

*) When verifying email, after clicking on URL in the email message, a login
page will appear. If the login is incorrect from the first try, the system will
"forget" that it was supposed to verify email and proceeds to show the main
SEGEX page. This is a bug.

*) Catch the exception that occurs on failure to connect to database (can test
this easily by stopping MySQL daemon on Mac) and present the user with a page
that describes what happened and encourages the user to send an email to the
correct address (rather than display an ugly error message).

*) Use YUI tooltip control to make forms (e.g. Find Probes, Compare Experiments)
more user-friendly.
http://developer.yahoo.com/yui/examples/container/tooltip.html

*) Raphael is now a plugin for YUI 3: http://yuilibrary.com/gallery/show/raphael
This is very exciting. Investigate (1) whether changing over to YUI 3 is
feasible (seems like it should be!) and (2) whether Raphael can be used for easy
graphing (will probably have to write own Javascript graphing module).

*) Venn diagrams could be plotted using Raphael. What is needed: optimization
algorithm (implemented in Javascript) for 3-cirlcle diagrams, and something to
show text labels (i.e. how many probes are significant). If done, place
resulting code on Github.

*) Standardize the look of Upload Annotation and Upload Data. For example,
platform dropdown box should be in the same relative position in both forms (at
the top).

*) Links in Manage Studies should direct user directly from an upload data form
(to a new experiment) with the given study preselected.

*) :TODO:07/07/2011 12:38:40:es: in TFSDisplay.pm, SQL injection risk (need data
validation).

*) Make upload file headers optional in Upload Data to a new experiment

*) CSV format should be supported in addition to tab-delimited. The idea is that
the same formats that are supported for output should also be supported for
input.

*) Instead of scattering calls to File::Temp throughout the application,
consider centralizing temporary directory info in Config.pm either by relying on
prefix from File::Temp or some other way.

*) Eventually, we need at least two types of database users: segex_basic and
segex_user. segex_user is granted UPDATE, INSERT, DELETE, and CREATE TEMPOARY
privileges, while segex_basic is only granted SELECT.

*) Investigate performance impact of full-length (30 characters) vs partial (18
characters and less) indexes on accession number and gene symbol queries.
