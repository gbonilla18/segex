*) This is important: there should be a "tree" of user actions. Index.cgi should
only take care of dispatching top-level actions in the tree. The modules
(ManageProjects, ManageStudies, ManageExperiments etc) should dispatch the
actions at the remaining levels. Call top-level actions "a=" and second-level
actions "b=". Pass reference to array of Javascript includes ot object
constructors. Constructors will fill out the array during the construction of
the object. Constructors perform most of the object initialization except
printing output. Constructors should also be allowed to handle storing of
session data. Dealing with Javascript include array: the array simply contains
names of Javascript files to load (or short relative paths), then it is trans-
formed for use with CGI.pm.

*) rename table "microarray" to "response" (don't rush with this)

*) Tentative: move "public" field from "Experiment" to "Study". Consequence: if
a particular experiment needs to be released but other experiments from the same
study need to stay private, the given # experiment will have to be referenced to
from a separate, "public" study (can be a virtual link).

*) start using DBI placeholders in SQL queries

*) consider using prepare_cached() DBI function instead of prepare()

*) abstract out reliance on local /js/ path in modules under SGX/.

*) rewrite queries that rely on NATURAL JOIN statements into ones that don't

*) use DBI::Profile to monitor performance of SQL statements

*) Write tests?

*) ManageStudies: a) why does _LoadQueryPID do an inner join by annotated
platform?  What doesn't it just list all studies (left join on platform)?  b)
_ExistingUnassignedStudyQuery --  why do a natural join with "microarray" table?
Seems like a very roundabout way to get a list of experiments for a given
platform

*) Concern about concepts used in SEGEX -- will these concepts be defined in a
similar way in labs run by other researchers? Discuss this with Dr. Waxman.
Example:

   a) Study has a pubmed id, however only plates belonging to the same platform
can be a part of the same study. This seems problematic because it seems natural
that a published study may involve more than one platform (for example, a study
could be investigating how a certain protein is expressed under certain
conditions in mice vs rats vs humans).

   b) This leads me to think that a better name for "study" would be "group" (of
plates).  Alternatively, one could allow more than one platform to be a part of
the same study.  As far as my understanding goes, Dr. Waxman'slargest concern
about allowing this was that one would never want to compare plates from
different platforms using "Compare Experiments" module (is this right?). However
it doesn't look like making a small modification to "Compare Experiments" module
to allow it to recognize platforms  would be very difficult.

   c) The way I currently see this is: "study" is actually a group of plates of
same type/platform, "experiment" is actually a plate.

*) abstract away common patterns in SGX/*.pm modules. For example, ManageStudies
object is in many ways similar to ManageProjects. Formalize this similarity and
abstract it away (to superclass perhaps?).

*) UI: when no pull-down menus have no items in them, do not show the pulldowns
at all.

*) Installation: automate file copying: have user provide only two directories:
CGI_ROOT and DOCUMENTS_ROOT. Create the subtree containing css/, images/, and
js/ directories under DOCUMENTS_ROOT and the subtree corresponding to cgi-bin
under CGI_ROOT.

*) Since permanent cookie storage was introduced (initially to store current
Working Project ids), it is now possible to recover expired sessions by storing
the session id in permanent storage. Implementing this would help keep
"sessions" table small.

*) The following does not seem to work: Although both ^Cyp2b and ^Cyp4b are
present in the database, only Cyp2b-prefixed genes show up in the following
query:
http://localhost/cgi-bin/segex/index.cgi?text=Cyp2b%0D%0ACyp4b&type=gene&match=prefix&opts=1&trans=fold&a=Search

*) Why are some gene names so long (some gene names consist of entire
sentences)? This may cause DB performance problems because gene name field is
twice indexed. Example of long gene names:
http://localhost/cgi-bin/segex/index.cgi?text=Transcribed&type=gene&match=prefix&opts=0&trans=fold&a=Search

*) Project ID must be an URL parameter for the Compare Experiments and Find
Probes modules, otherwise their execution and results will be state-dependent,
which will cause problems when emailing links, for example.

*) SQL queries are fast when the number of rows searched is minimized early on.
Investigate whether there is a way to speed up FindProbes by limiting the search
space by relying on Working Project selection.

*) The Find Probes form should be generated by the same routine in Find Probes
as in the "filter by list" section of Compare Experiments.

*) One should be able to upload a file in Find Probes form just as it currently
is in Compare Experiments.

*) On initializations/construction, modules should be passed named arguments
instead of unnamed ones. For example: my $findProbes = SGX::FindProbes->new(dbh
=> $dbh, cgi => $q, session => $s).

*) When verifying email, after clicking on URL in the email message, a login
page will appear. If the login is incorrect from the first try, the system will
"forget" that it was supposed to verify email and proceeds to show the main
SEGEX page. This is a bug.

*)  :TODO:06/20/2011 22:46:11:es:  add key to sessions table

*) Consider using Protovis Javascript framework for drawing graphs inside the
client browser window from JSON data obtained from the server (as opposed to
generating SVG files on the server as it is set up currently).
