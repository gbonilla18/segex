TODO: 

0) This is important: there should be a "tree" of user actions. Index.cgi should only
take care of dispatching top-level actions in the tree. The modules (ManageProjects,
ManageStudies, ManageExperiments etc) should dispatch the actions at the remaining
levels. Call top-level actions "a=" and second-level actions "b=". Pass reference to 
array of Javascript includes ot object constructors. Constructors will fill out the
array during the construction of the object. Constructors perform most of the object
initialization except printing output. Constructors should also be allowed to handle
storing of session data. Dealing with Javascript include array: the array simply 
contains names of Javascript files to load (or short relative paths), then it is trans-
formed for use with CGI.pm.

1) rename table "microarray" to "response"

2) Tentative: move "public" field from "Experiment" to "Study". Consequence: if a particular 
experiment needs to be released but other experiments from the same study need to stay private, 
the given # experiment will have to be referenced to from a separate, "public" study (can be a 
virtual link).

3) add "species" field to the "experiment" table as well as a foreign key 
to a separate "Species" table.

4) start using DBI placeholders in SQL queries

5) consider using prepare_cached() DBI function instead of prepare()

6) abstract out reliance on local /js/ path in modules under SGX/.

7) rewrite queries that rely on NATURAL JOIN statements into ones that don't

8) use DBI::Profile to monitor performance of SQL statements

9) Write tests?

10) ManageStudies: 
    a) why _LoadQueryPID does an inner join by annotated platform? What doesn't
    it just list all studies (left join on platform)?

    b) _ExistingUnassignedStudyQuery --  why do a natural join with "microarray"
    table? Seems like a very roundabout way to get a list of experiments for a given
    platform

11) Concern about concepts used in SEGEX -- will these concepts be defined in a similar 
way in labs run by other researchers? Discuss this with Dr. Waxman. Example:

   a) Study has a pubmed id, however only plates belonging to the same platform can be 
   a part of the same study. This seems problematic because it seems natural that a
   published study may involve more than one platform (for example, a study could be
   investigating how a certain protein is expressed under certain conditions in mice
   vs rats vs humans).

   b) This leads me to think that a better name for "study" would be "group" (of plates).
   Alternatively, one could allow more than one platform to be a part of the same study.
   As far as my understanding goes, Dr. Waxman'slargest concern about allowing this was
   that one would never want to compare plates from different platforms using "Compare
   Experiments" module (is this right?). However it doesn't look like making a small
   modification to "Compare Experiments" module to allow it to recognize platforms  would
   be very difficult.

   c) The way I currently see this is: "study" is actually a group of plates of same type/platform,
   "experiment" is actually a plate.

12) abstract away common patterns in SGX/*.pm modules. For example, ManageStudies object
is in many ways similar to ManageProjects. Formalize this similarity and abstract it away
(to superclass perhaps?).

13) UI: when no pull-down menus have no items in them, do not show the pulldowns at all.

14) Installation: automate file copying: have user provide only two directories: CGI_ROOT and
DOCUMENTS_ROOT. Create the subtree containing css/, images/, and js/ directories under
DOCUMENTS_ROOT and the subtree corresponding to cgi-bin under CGI_ROOT.

15) Since permanent cookie storage was introduced (initially to store current Working
Project ids), it is now possible to recover expired sessions by storing the session id
in permanent storage. Implementing this would help keep "sessions" table small.

16) The following does not seem to work:
Although both ^Cyp2b and ^Cyp4b are present in the database, only Cyp2b-prefixed genes
show up in the following query:
http://localhost/cgi-bin/segex/index.cgi?text=Cyp2b%0D%0ACyp4b&type=gene&match=prefix&opts=1&trans=fold&a=Search

17) Why do so many gene names are long? This may cause DB performance problems because
gene name field is twice indexed. Example of long gene names:
http://localhost/cgi-bin/segex/index.cgi?text=Transcribed&type=gene&match=prefix&opts=0&trans=fold&a=Search

18) Project ID must be an URL parameter for the Compare Experiments and Find Probes
modules, otherwise their execution and results will be state-dependent, which will cause
problems when emailing links, for example.

19) Move out Javascript from findProbes_js() Perl function int a standalone JS file.

20) Drop the requirement for the Prototype Javascript library to be installed.

21) SQL queries are fast when the number of rows searched is minimized early on.
Investigate whether there is a way to speed up FindProbes by limiting the search space
by relying on Working Project selection.
