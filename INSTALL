Table of Contents:
1.   Linux
1.1. Software Install
1.2. Database Setup (MySQL)
2.   Mac OS X
2.1. Software Install
2.2. Database Setup (MySQL)


1. Linux


1.1. Software Install on Linux


1.1.1. Install dependencies. To upgrade CPAN and install/upgrade all of the
required packages:

	sudo /usr/bin/cpan Bundle::CPAN
	sudo /usr/bin/cpan Apache::Session::MySQL CGI::Carp CGI::Cookie Carp \
Config::General DBD::mysql DBI Data::Dumper Data::UUID Digest::SHA1 \
Email::Address Exception::Class Exception::Class::DBI Hash::Merge JSON \
JSON::XS Lingua::EN::Inflect List::Util Mail::Send Math::BigFloat Math::BigInt \
Readonly Scalar::Util Storable Text::Autoformat Text::CSV Text::CSV_XS \
Tie::IxHash URI::Escape

Running the second command again will let you confirm that you have all of the
required Perl packages installed.


1.1.2. [Development version only] Change log file path in "Debug.pm" to a path
actually present and writable on the given system. On Linux, the path is
"/var/www/error_log/error_log". Make sure that a CGI process has write access to
said file. On Linux, Apache server process is owned by user under username
"nobody". For debugging purposes, however, it is more convenient to create a
separate log file so that more than one software/database instance could be set
up on the same machine:

  mkdir -p ~/log/apache2
  cd  ~/log/apache2
  touch segex_log
  sudo chown nobody:nobody segex_log


1.1.3. Copy files. If you choose to create soft links instead, add
"FollowSymLinks" directive to the Apache configuration file (either local
.htaccess or global httpd.conf depending on your setup) for both CGI_ROOT and
DOCUMENTS_ROOT directories. Note: this assumes you have downloaded YUI v2.x to
~/tarballs/yui.tgz.

   # CGI_ROOT

   # /cgi-bin/segex
   cd /var/www/cgi-bin
   sudo cp -R ~/segex/cgi-bin segex
   sudo cp ~/segex/segex.conf.sample segex/segex.conf

   # DOCUMENTS_ROOT

   # /yui
   cd /var/www/
   tar xvzf ~/tarballs/yui.tgz .

   # /segex/
   mkdir segex
   cd segex

   # /segex/css
   sudo cp -R ~/segex/css .

   # /segex/images
   sudo cp -R ~/segex/images .

   # /segex/js
   sudo cp -R ~/segex/js .


1.1.4. To enable URL rewriting (removes the need to enter "index.cgi" in the URL,
modify your main Apache configuration file (usually /etc/httpd/conf/httpd.conf)
to allow .htaccess overrides. On Linux Cent OS, this means:

<Directory "/var/www/cgi-bin">
    AllowOverride Options FileInfo
    ...

When URL rewriting is enabled, set correct path in the "cgi-bin/.htaccess" file:

RewriteRule ^$ /cgi-bin/segex/index.cgi


1.1.5. Check that path to default mailer program (sendmail, postfix, etc) is set
correctly in cgi-bin/segex.conf. On Linux Cent OS, this path is /usr/sbin.

mailer_path = "/usr/sbin"



1.2. Database Setup (MySQL) on Linux


1.2.1. [Optional] To allow for full-text searches on three-letter words and acronyms
such as DNA, RNA, etc., edit file called my.cnf (CentOS: /etc/my.cnf) and add
the following line(s) under section called "[mysqld]":

   [mysqld]
   # Allow full-text indexes on three-letter words such as DNA, RNA, etc.
   ft_min_word_len=3

Next, restart MySQL server:

  sudo service mysqld restart


1.2.2. Create empty database and add a dedicated user account. NOTE: in the default
MySQL installation, the root password is empty (simply hit enter to proceed).
NOTE: don't forget to change segex_user_password to something different.

  mysql -u root -p
  > CREATE DATABASE segex;
  > CREATE USER 'segex_user'@'localhost' IDENTIFIED BY 'segex_user_password';
  > GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE TEMPORARY TABLES
    ON segex.* TO 'segex_user'@'localhost';


1.2.3. Load table definitions and data. To set up from scratch (with empty
tables):

  cat sql/table_defs.sql | mysql segex -u root -p

To load tables plus data from backup:

  gunzip -c segex.2012.05.07.sql.gz | mysql segex -u root -p

NOTE: you can use the converse of this comment to backup a database:

  mysqldump --routines segex -u root -p | gzip -c > segex.2012.05.07.sql.gz

The --routines option is necessary because otherwise mysqldump command will not
back up stored MySQL procedures and functions.


1.2.4. Update cgi-bin/segex.conf file with the correct database, user, and password
info.




2. Mac OS X

2.1. Software Install (Mac OS X)

2.1.1. Install dependencies. You need to have a C compiler installed (GCC comes
with Xcode) and configured. To upgrade CPAN and install/upgrade all of the
required packages:

	sudo /usr/bin/cpan Bundle::CPAN
	sudo /usr/bin/cpan Apache::Session::MySQL CGI::Carp CGI::Cookie Carp \
Config::General DBD::mysql DBI Data::Dumper Data::UUID Digest::SHA1 \
Email::Address Exception::Class Exception::Class::DBI Hash::Merge JSON \
JSON::XS Lingua::EN::Inflect List::Util Mail::Send Math::BigFloat Math::BigInt \
Readonly Scalar::Util Storable Text::Autoformat Text::CSV Text::CSV_XS \
Tie::IxHash URI::Escape

Running the second command again will let you confirm that you have all of the
required Perl packages installed.

NOTE: If you are running Mac OS X 10.6 and have Xcode 4 installed, you no
longer have PPC assembler required to build CPAN packages. To work around this,
you can either (a) go to the corresponding subdirectory in ~/.cpan/build, remove
all references to PPC architecture (e.g. "-arch ppc") and reinstall package with
"sudo make" and "sudo make install". To ensure CPAN can see your module, type
"install My::Module" in CPAN shell and press <Enter>. You should see a message,
"My::Module is up to date (vx.xx)".  Alternatively (b), create the following
symlinks:

sudo ln -s \
/Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc \
/Developer/usr/libexec/gcc/darwin

sudo ln -s \
/Developer/Platforms/iPhoneOS.platform/Developer/usr/libexec/gcc/darwin/ppc \
/usr/libexec/gcc/darwin


2.1.2. [Development version only] Change log file path in "Debug.pm" to a path
actually present and writable on the given system. On Mac OS X, the path is
"/private/var/log/apache2/error_log". Make sure that a CGI process has write
access to said file. On Mac OS X, Apache server process is owned by user under
username "www". For debugging purposes, however, it is more convenient to create
a separate log file so that more than one software/database instance could be
set up on the same machine.

  mkdir -p ~/log/apache2
  cd  ~/log/apache2
  touch segex_log
  sudo chown www:wheel segex_log


2.1.3. Set up mailer. The Mail::Send module can use either Sendmail or Postfix. The
current version of Segex relies on a default mailer, which can be either
Sendmail or Postfix depending on the system. On my Mac OS X Snow Leopard, the
default mailer is Postfix.

   GMAIL EMAIL RELAY USING POSTFIX ON MAC OS X 
        (Adapted with some changes after: 
        http://www.riverturn.com/blog/?p=239)

   2.1.3.1. Create the Simple Authentication and Security Layer (SASL) password
file.

        sudo vi /etc/postfix/sasl_passwd

        Enter the following and save the file:

        smtp.gmail.com:587 your_name@gmail.com:your_password

   2.1.3.2. Create a Postfix lookup table for SASL.

        sudo postmap /etc/postfix/sasl_passwd

   This creates a binary file called "/etc/postfix/sasl_passwd.db". When
done, you can delete the "/etc/postfix/sasl_passwd" created in the previous
step, to prevent the plain-text password from being discovered by an attacker
(Postfix will use the .db file from now on):

        sudo rm /etc/postfix/sasl_passwd

   Also, there is no need for anyone but root to have read access to the
database:

        sudo chmod 600 /etc/postfix/sasl_passwd.db

   2.1.3.3. Configure Postfix:

        sudo vi /etc/postfix/main.cf

   By default, everything is commented out. You can just append the following to
the end of file and then save it:

        # Minimum Postfix-specific configurations.
        mydomain_fallback = localhost
        mail_owner = _postfix
        setgid_group = _postdrop
        relayhost=smtp.gmail.com:587

        # Enable SASL authentication in the Postfix SMTP client.
        smtp_sasl_auth_enable=yes
        smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
        smtp_sasl_security_options=

        # Enable Transport Layer Security (TLS), i.e. SSL.
        smtp_use_tls=yes
        smtp_tls_security_level=encrypt
        tls_random_source=dev:/dev/urandom

   2.1.3.4. Test that everything is OK with "sudo postfix start" or, if the process
is already running, with "sudo postfix reload". If you need to view mail queue,
type "mailq" in the terminal. To clear the mail queue, run "sudo postsuper -d
ALL".


2.1.4. Copy files. If you wish to set up symlinks instead of copying, add
FollowSymLinks directive in the Apache configuration file (either local
.htaccess or global httpd.conf depending on your setup) for both CGI_ROOT and
DOCUMENTS_ROOT directories. Note: this assumes you have downloaded YUI v2.x to
~/tarballs/yui.tgz.

   # CGI_ROOT

   # /cgi-bin/segex
   cd /Library/WebServer/CGI-Executables
   sudo cp -R ~/segex/cgi-bin segex
   sudo cp ~/segex/segex.conf.sample segex/segex.conf

   # DOCUMENTS_ROOT

   # /yui
   cd /Library/WebServer/Documents
   tar xvzf ~/tarballs/yui.tgz .

   # /segex/
   mkdir segex
   cd segex

   # /segex/css
   sudo cp -R ~/segex/css .

   # /segex/images
   sudo cp -R ~/segex/images .

   # /segex/js
   sudo cp -R ~/segex/js .


2.1.5. To enable URL rewriting (removes the need to enter "index.cgi" in the URL,
modify your main Apache configuration file (usually /etc/apache2/httpd.conf) to
allow .htaccess overrides. On Mac OS X, this means: 

<Directory "/Library/WebServer/CGI-Executables">
    AllowOverride Options FileInfo
    ...

When URL rewriting is enabled, set correct path in the "cgi-bin/.htaccess" file:

RewriteRule ^$ /cgi-bin/segex/index.cgi


2.1.6. Check that the path to the default mailer program (sendmail, postfix,
etc) is set correctly in cgi-bin/segex.conf. On Mac OS X, this path is
/usr/sbin.

mailer_path = "/usr/sbin"



2.2. Database setup (MySQL) on Mac OS X


2.2.1. [Optional] To allow for full-text searches on three-letter words and acronyms
such as DNA, RNA, etc., copy file called "my-huge.cnf" from 
/usr/local/mysql/support-files/ into /etc/, renaming it to "my.cnf":

sudo cp /usr/local/mysql/support-files/my-huge.cnf /etc/my.cnf

Next, add the following line(s) under section called "[mysqld]" to the newly
created my.cnf file:

   [mysqld]
   # Allow full-text indexes on three-letter words such as DNA, RNA, etc.
   ft_min_word_len=3

Next, restart MySQL server via System Preferences.


2.2.2. Create empty database and add a dedicated user account. Note: in the default
MySQL installation, the root password is empty (simply press enter to proceed).
NOTE: don't forget to change segex_user_password to something different.

  mysql -u root -p
  > CREATE DATABASE segex;
  > CREATE USER 'segex_user'@'localhost' IDENTIFIED BY 'segex_user_password';
  > GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE, CREATE TEMPORARY TABLES
    ON segex.* TO 'segex_user'@'localhost';


2.2.3. Load table definitions and data. To set up from scratch (with empty
tables):

  cat sql/table_defs.sql | mysql segex -u root -p

To load tables plus data from backup:

  gunzip -c segex.sql.gz | mysql segex -u root -p

NOTE: you can use the converse of this comment to backup a database:

  mysqldump --routines segex -u root -p | gzip -c > segex.2012.05.07.sql.gz

The --routines option is necessary because otherwise mysqldump command will not
back up stored MySQL procedures and functions.


2.2.4. Update cgi-bin/segex.conf file with correct database, user, and password
information.
